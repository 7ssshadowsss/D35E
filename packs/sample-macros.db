{"_id":"0MoNT9JU384NRc23","name":"Toggle Buff","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"// CONFIGURATION\r\n// If one or more tokens are selected, those will be used instead of the listed actors\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n  buffName: \"Mage Armor\"\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC);\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  for (let actor of actors) {\r\n    const buff = actor.items.find(o => o.name === c.buffName);\r\n    if (buff != null) {\r\n      let active = getProperty(buff.data, \"data.active\");\r\n      if (active == null) active = false;\r\n      buff.update({ \"data.active\": !active });\r\n    }\r\n  }\r\n}\r\n","author":"T9i9xVjdkHeFZC72","img":"systems/D35E/icons/spells/protect-blue-1.jpg","actorIds":[]}
{"_id":"13AHAyh9DklWxvWP","name":"Show Defenses","permission":{"default":0},"type":"script","sort":100001,"flags":{},"scope":"global","command":"game.D35E.rollDefenses();","author":"T9i9xVjdkHeFZC72","img":"systems/D35E/icons/items/armor/shield-light-metal.png","actorIds":[]}
{"name":"Roll Saving Throw","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"// CONFIGURATION\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC && o.hasPerm(game.user, \"OWNER\"));\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  const _roll = async function(type) {\r\n    for (let o of actors) {\r\n      await o.rollSavingThrow(type, { event: new MouseEvent({}) });\r\n    }\r\n  };\r\n\r\n  const msg = `Choose a saving throw to roll for the following actor(s): <strong>${actors.map(o => o.name).join(\"</strong>, <strong>\")}</strong>`;\r\n\r\n  new Dialog({\r\n    title: \"Roll saving throw\",\r\n    content: `<p>${msg}</p>`,\r\n    buttons: {\r\n      fort: {\r\n        label: \"Fortitude\",\r\n        callback: () => _roll(\"fort\"),\r\n      },\r\n      ref: {\r\n        label: \"Reflex\",\r\n        callback: () => _roll(\"ref\"),\r\n      },\r\n      will: {\r\n        label: \"Will\",\r\n        callback: () => _roll(\"will\"),\r\n      },\r\n    },\r\n  }).render(true);\r\n}","author":"T9i9xVjdkHeFZC72","img":"systems/D35E/icons/feats/diehard.jpg","actorIds":[],"_id":"ON7b8yS1lcBxkMuo"}
{"name":"Award XP","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"\r\n// CONFIGURATION\r\n// If one or more tokens are selected, those will be used instead of the listed actors\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC);\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  const _action = function(xp) {\r\n    if (!isNaN(xp)) {\r\n      actors.forEach(o => {\r\n        const curXP = getProperty(o.data, \"data.details.xp.value\") || 0;\r\n        o.update({ \"data.details.xp.value\": curXP + xp });\r\n      });\r\n    }\r\n  };\r\n\r\n  const msg = `Award XP to the following actors: <strong>${actors.map(o => o.name).join(\"</strong>, <strong>\")}</strong>`;\r\n  const field = `<input type=\"text\" name=\"xp\" value=\"0\" placeholder=\"XP amount\" style=\"margin-bottom: 8px;\" />`;\r\n\r\n  new Dialog({\r\n    title: \"Roll saving throw\",\r\n    content: `<p>${msg}</p>${field}`,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Give All\",\r\n        callback: html => {\r\n          let xp = parseInt(html.find('input[name=\"xp\"]').val());\r\n          _action(xp);\r\n        },\r\n      },\r\n      distribute: {\r\n        label: \"Distribute\",\r\n        callback: html => {\r\n          let xp = parseInt(html.find('input[name=\"xp\"]').val());\r\n          xp = Math.floor(xp / actors.length);\r\n          _action(xp);\r\n        }\r\n      }\r\n    },\r\n  }).render(true);\r\n}\r\n","author":"T9i9xVjdkHeFZC72","img":"icons/svg/book.svg","actorIds":[],"_id":"dMr1RIO7awUbGX4M"}
{"name":"Roll Skill","permission":{"default":0,"T9i9xVjdkHeFZC72":3},"type":"script","flags":{},"scope":"global","command":"// CONFIGURATION\r\n// If one or more tokens are selected, those will be used instead of the listed actors\r\n// Leave the actorNames array empty to guess the players\r\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\r\nconst c = {\r\n  actorNames: [],\r\n  skills: [\"per\", \"sen\", \"ste\", \"sur\"],\r\n  labels: [null, null, null, null],\r\n};\r\n// END CONFIGURATION\r\n\r\nconst tokens = canvas.tokens.controlledTokens;\r\nlet actors = tokens.map(o => o.actor);\r\nif (!actors.length && c.actorNames.length) actors = game.actors.entities.filter(o => c.actorNames.includes(o.name));\r\nif (!actors.length) actors = game.actors.entities.filter(o => o.isPC && o.hasPerm(game.user, \"OWNER\"));\r\nactors = actors.filter(o => o.hasPerm(game.user, \"OWNER\"));\r\n\r\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\r\nelse {\r\n  const _roll = async function(type) {\r\n    for (let o of actors) {\r\n      await o.rollSkill(type, { event: new MouseEvent({}), skipDialog: true });\r\n    }\r\n  };\r\n\r\n  const buttons = c.skills.reduce((cur, s, a) => {\r\n    let label = c.labels[a];\r\n    if (label == null) label = CONFIG.D35E.skills[s] || \"Unknown Skill\";\r\n    cur[s] = {\r\n      label: label,\r\n      callback: () => _roll(s),\r\n    };\r\n    return cur;\r\n  }, {});\r\n\r\n  const msg = `Choose a skill to roll for the following actor(s): <strong>${actors.map(o => o.name).join(\"</strong>, <strong>\")}</strong>`;\r\n\r\n  new Dialog({\r\n    title: \"Roll saving throw\",\r\n    content: `<p>${msg}</p>`,\r\n    buttons: buttons,\r\n  }).render(true);\r\n}","author":"T9i9xVjdkHeFZC72","img":"systems/D35E/icons/feats/skill-focus.jpg","actorIds":[],"_id":"mL9k7wUzzFbj1NmY"}
{"_id":"ntsVqpwD52tRF1nN","name":"Mass Token Attack","permission":{"default":0,"VIfT2pClvTXfstmc":3},"type":"script","flags":{"core":{"sourceId":"Macro.NUK2KVTOFkSEcIhg"}},"scope":"global","command":"//If no tokens are selected this Macro wont work\nif (canvas.tokens.controlled == 0) { ui.notifications.error(\"Please Select one or more Actors\") } else {\n    //Declare Variables\n    var attackArrayCombined = new Array\n    let actors = canvas.tokens.controlled.map(token => {\n        return token.actor\n    });\n    //Do this for each actor selected\n    for (let actor of actors) {\n        //more Variables to be declared (But inside this loop)\n        let myArray = actor.data.items\n        var attackSet = new Set\n        const attackArray = myArray\n            .filter((item) => item.type === 'attack') // filter to only attacks\n            .map((item) => { //map over each item and if it's a duplicate add a blank else? add it to the Array and set \n                const name = `${item.name}`;\n                if (attackSet.has(name)) {\n                    return { name: '' }\n                } else {\n                    attackSet.add(name)\n                    return { name }\n                }\n            }\n            );\n\n        const attackArrayNew = attackArray.filter((item) => item.name !== '') //filter out blanks\n\n        attackArrayCombined.push(attackArrayNew)//Combine the Arrays that were generated for each actor into one place\n    }\n    let flattened = attackArrayCombined.reduce((a, b) => a.concat(b), []); //flatten it out so next command can count\n\n    let counts = flattened.reduce(                                       //count each attack in arrays to compare to the number of actors selected later\n        (map, { name }) => map.set(name, (map.get(name) || 0) + 1), new Map()\n    );\n    let found = attackArrayCombined[0].filter(({ name }) => counts.get(name) === attackArrayCombined.length); //Compare the number of Duplicates of each attack to the Number of Actors selected (to make sure they all have the attack)\n    if (found == 0) {\n        ui.notifications.error(\"Either Selected Actor has no Attacks or Selected Actors do not have common attacks, Cannot Batch Roll\")//if actors have no attacks in common then give an error and stop\n    } else { //if they do...\n        var data = { attacks: found } //so it makes sense to handlebars\n        const contentRaw = `\n      <form>\n    <div class=\"form-group\" >\n    <label id='attackDataHere'>Available Attacks:</label>   \n    <select id=\"choices\" name=\"choices\">\n           {{#each attacks}}<option value=\"{{name}}\">{{name}}</option>{{/each}}\n          </select>\n        </div>\n  <em>Select attack that you want to roll for selected tokens. by default will roll first valid attack on respective character sheet.</em>\n      </form>\n    `//HTML template so that we can have a drop down\n        const template = Handlebars.compile(contentRaw);//give the html template to handlebars\n        const content = template(data); //use our attack data from before to insert into template\n        let selectedOption; //declaring another variable :D\n        //Make a dialog and make it do things and stuff\n        let dialog = new Dialog({\n            title: \"Attack Selection\",\n            content: content, //this is where that HTML ends up\n            //what do you want the buttons to do?\n            buttons: {\n                yes: {\n                    icon: '<i class=\"fas fa-dice\"></i>',\n                    label: \"Attack\",\n                    callback: () => {\n                        selectedOption = document.getElementById('choices').value;\n                    },\n                },\n                no: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: \"Cancel\",\n                }\n            },\n            default: \"yes\", //Default point to yes\n            close: () => {\n                if (selectedOption) {\n                    switch (selectedOption) {\n                        default: //the default option for the Dialog, it was easy to put the code here so i did\n                            let actors = canvas.tokens.controlled.map(token => { //gotta declare the actors again\n                                return token.actor\n                            })\n                            for (let actor of actors) { //another for loop for each of the actors so they each do their attack\n                                var itemFound = actor.items.find(item => item.name === `${selectedOption}` && item.type === \"attack\") // ${selectedOption} is the name of the attack(sometimes shared with weapons) \n                                //so we don't want any weapons from your character sheet only the attacks they produce\n                                let item = itemFound.useAttack({ skipDialog: true }) // Skip dialog will use the attack without making a bunch of other pop ups \n                                item\n                            }\n                    }\n                }\n            }\n        }\n        );\n        dialog.render(true); //RENDER!!!!\n    }\n}","author":"VIfT2pClvTXfstmc","img":"icons/svg/sword.svg","actorIds":[]}
